from dotenv import load_dotenv
from aiogram import Bot, types
from aiogram.utils import executor
from aiogram.dispatcher import Dispatcher, FSMContext
from aiogram.contrib.fsm_storage.memory import MemoryStorage
import os
from dataclasses import dataclass
from typing import Optional
from aiogram.dispatcher.filters import Command
from aiogram.dispatcher.filters.state import State, StatesGroup
from buttons import ikbg, rkbm
from pydantic import BaseModel, Field, ValidationError, validator
from validator import ValidatedUserRegistrationDTO
from Database.DataUsers import supabase, get_user_state_by_id, update_user_state
from uud import generate_uuid_from_chat_id

load_dotenv()

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞, –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞ –∏ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞ —Å–æ—Å—Ç–æ—è–Ω–∏–π
bot = Bot(token=os.getenv("TOKEN"))
dp = Dispatcher(bot, storage=MemoryStorage())

# DTO –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
@dataclass
class UserRegistrationDTO:
    chat_id: int
    age: Optional[int] = None
    gender: Optional[bool] = None
    name: Optional[str] = None

# –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —ç–∫–∑–µ–º–ø–ª—è—Ä–æ–≤ DTO
user_registration = {}

# –°–æ—Å—Ç–æ—è–Ω–∏—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
class RegistrationStates(StatesGroup):
    waiting_for_age = State()
    waiting_for_gender = State()
    waiting_for_name = State()
    final_reg = State()

# –°–æ—Å—Ç–æ—è–Ω–∏—è –º–µ–Ω—é
class MenuStates(StatesGroup):
    waiting_for_profile = State()
    profile = State()
    tasks = State()
    calendar = State()
    help = State()
    rating = State()


@dp.message_handler(Command('start'), state=None)
async def start_command(message: types.Message, state: FSMContext):
    chat_id = message.chat.id
    user_state = get_user_state_by_id(chat_id)  # –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ Supabase

    if user_state:
        # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω
        await MenuStates.waiting_for_profile.set()
        await message.reply("–ß—Ç–æ–±—ã –ø—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–≤–æ–π –ø—Ä–æ—Ñ–∏–ª—å, –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É '–ü—Ä–æ—Ñ–∏–ª—å'.",reply_markup=rkbm)
    else:
        # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_registration[chat_id] = UserRegistrationDTO(chat_id)
        await message.reply("–ü—Ä–∏–≤–µ—Ç! –î–∞–≤–∞–π –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º—Å—è! –í–≤–µ–¥–∏—Ç–µ –≤–∞—à –≤–æ–∑—Ä–∞—Å—Ç:")

        # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è "waiting_for_age" –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        await RegistrationStates.waiting_for_age.set()
        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        update_user_state(chat_id, str(RegistrationStates.waiting_for_age))

@dp.message_handler(state=RegistrationStates.waiting_for_age)
async def handle_age(message: types.Message, state: FSMContext):
    chat_id = message.chat.id
    age = message.text

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ –≤–∞–ª–∏–¥–∞—Ü–∏—è –≤–æ–∑—Ä–∞—Å—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    try:
        validated_age = ValidatedUserRegistrationDTO(chat_id=chat_id, age=age).age
    except ValidationError as e:
        error_msg = e.errors()[0]["msg"]
        await message.reply(error_msg)
        return

    # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤–æ–∑—Ä–∞—Å—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ DTO
    dto = user_registration[chat_id]
    dto.age = validated_age
    print(f"–í–æ–∑—Ä–∞—Å—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {chat_id}: {validated_age}")

    # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –ø–æ–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    await message.reply("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –ø–æ–ª (Male/Female):", reply_markup=ikbg)

    # –ü–µ—Ä–µ—Ö–æ–¥ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —Å–æ—Å—Ç–æ—è–Ω–∏—é "waiting_for_gender"
    await RegistrationStates.waiting_for_gender.set()
    # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    update_user_state(chat_id, str(RegistrationStates.waiting_for_gender))

@dp.callback_query_handler(state=RegistrationStates.waiting_for_gender)
async def handle_gender_callback(query: types.CallbackQuery, state: FSMContext):
    chat_id = query.message.chat.id
    gender = query.data.lower()

    # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –ø–æ–ª–∞ –≤ DTO
    dto = user_registration[chat_id]
    dto.gender = bool(int(gender))
    print(f"–ü–æ–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {chat_id}: {gender}")

    # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    await query.message.reply("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –§–ò–û:")

    # –ü–µ—Ä–µ—Ö–æ–¥ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —Å–æ—Å—Ç–æ—è–Ω–∏—é "waiting_for_name"
    await RegistrationStates.waiting_for_name.set()

    # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    update_user_state(chat_id, str(RegistrationStates.waiting_for_name))

@dp.message_handler(state=RegistrationStates.waiting_for_name)
async def handle_name(message: types.Message, state: FSMContext):
    chat_id = message.chat.id
    name = message.text

    # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏–º–µ–Ω–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ DTO
    dto = user_registration[chat_id]
    dto.name = name
    print(f"–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {chat_id}: {name}")

    # –ü–æ–ª—É—á–∞–µ–º –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –µ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è –≤ Telegram
    telegram_name = message.from_user.first_name

    # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    try:
        tg_username = '@' + message.from_user.username if message.from_user.username else dto.name
        response = supabase.table('UsersData').insert([{
            'full_name': dto.name,
            'chat_id': chat_id,
            'age': int(dto.age),
            'gender': bool(dto.gender),
            'user_state': str(RegistrationStates.final_reg)
        }]).execute()
        print(f"–î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {chat_id} –æ–±–Ω–æ–≤–ª–µ–Ω—ã: {response}")
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {chat_id}: {e}")

    # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    update_user_state(chat_id, str(RegistrationStates.final_reg))

    # –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –æ —É—Å–ø–µ—à–Ω–æ–π —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
    await bot.send_message(chat_id, f"–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞, {dto.name}!", reply_markup=rkbm)

    # –£–¥–∞–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –æ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ —Å–ª–æ–≤–∞—Ä—è user_registration
    del user_registration[chat_id]
    print(f"–î–∞–Ω–Ω—ã–µ –æ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {chat_id} —É–¥–∞–ª–µ–Ω—ã")
    await state.finish()
    await MenuStates.profile.set()

@dp.message_handler(state=MenuStates.waiting_for_profile)
async def handle_waiting_for_profile(message: types.Message, state: FSMContext):
    chat_id = message.chat.id
    select = message.text
    if select == "üë§–ü—Ä–æ—Ñ–∏–ª—å":
        await MenuStates.profile.set()
        await handle_profile(message, state)
    elif select == "üìä–†–µ–π—Ç–∏–Ω–≥":
        await MenuStates.rating.set()
        await handle_rating(message, state)
    elif select == "üìÜ–ö–∞–ª–µ–Ω–¥–∞—Ä—å —Å–æ–±—ã—Ç–∏–π":
        await MenuStates.calendar.set()
        await handle_calendar(message, state)
    elif select == "‚ùì–ü–æ–º–æ—â—å":
        await MenuStates.help.set()
        await handle_help(message, state)
    elif select == "üìù–ó–∞–¥–∞–Ω–∏—è":
        await MenuStates.tasks.set()
        await handle_tasks(message, state)
    else:
        await message.reply("–ù–µ—Ç —Ç–∞–∫–æ–≥–æ –≤–∞—Ä–∏–∞–Ω—Ç–∞ –≤—ã–±–æ—Ä–∞!")

@dp.message_handler(state=MenuStates.profile)
async def handle_profile(message: types.Message, state: FSMContext):
    chat_id = message.chat.id
    select = message.text
    if select == "üë§–ü—Ä–æ—Ñ–∏–ª—å":
        # –ó–∞–ø—Ä–æ—Å –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö Supabase
        response = supabase.table('UsersData').select('full_name','gender','age','balance').eq('chat_id', chat_id).execute()
        print(response)
        items = response.data
        if len(items) > 0:
            user_data = items[0]
            pseudo = user_data.get('full_name', 'Unknown')
            gender = user_data.get('gender', 'Unknown')
            age = user_data.get('age', 'Unknown')
            balance = user_data.get('balance', 0)
            if gender:
                gender = "üôã‚Äç‚ôÇÔ∏è"
                image = "male.png"
            else:
                gender = "üôã‚Äç‚ôÄÔ∏è"
                image = "female.png"
            # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            profile_message = f"–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –≤–∞—à –ø—Ä–æ—Ñ–∏–ª—å:\n\n" \
                              f"{gender}{pseudo}, {age} –ª–µ—Ç\n‚îî–í–∞—à–µ –º–µ—Å—Ç–æ –≤ —Ç–æ–ø–µ: ?\n\n" \
                              f"üí∞–ë–∞–ª–∞–Ω—Å: {balance}üîò –ø–æ–∏–Ω—Ç–æ–≤\n‚îî–ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π –ø–æ—Å–µ—â–µ–Ω–æ: ?"

            await bot.send_photo(chat_id=chat_id, photo=open(image, 'rb'), caption=profile_message)
        else:
            await bot.send_message(chat_id, "–ü—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
    else:
        await bot.send_message(chat_id, "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤—ã–±–æ—Ä.")
    await MenuStates.waiting_for_profile.set()

@dp.message_handler(state=MenuStates.rating)
async def handle_rating(message: types.Message, state: FSMContext):
    chat_id = message.chat.id
    select = message.text
    await bot.send_message(chat_id, f"–ù–∞–∂–∞—Ç–∞ –∫–Ω–æ–ø–∫–∞ —Ä–µ–π—Ç–∏–Ω–≥")
    await MenuStates.waiting_for_profile.set()

@dp.message_handler(state=MenuStates.calendar)
async def handle_calendar(message: types.Message, state: FSMContext):
    chat_id = message.chat.id
    select = message.text
    await bot.send_message(chat_id, f"–ù–∞–∂–∞—Ç–∞ –∫–Ω–æ–ø–∫–∞ –∫–∞–ª–µ–Ω–¥–∞—Ä—å")
    await MenuStates.waiting_for_profile.set()

@dp.message_handler(state=MenuStates.help)
async def handle_help(message: types.Message, state: FSMContext):
    chat_id = message.chat.id
    select = message.text
    await bot.send_message(chat_id, f"–ù–∞–∂–∞—Ç–∞ –∫–Ω–æ–ø–∫–∞ –ø–æ–º–æ—â—å")
    await MenuStates.waiting_for_profile.set()

@dp.message_handler(state=MenuStates.tasks)
async def handle_tasks(message: types.Message, state: FSMContext):
    chat_id = message.chat.id
    select = message.text
    await bot.send_message(chat_id, f"–ù–∞–∂–∞—Ç–∞ –∫–Ω–æ–ø–∫–∞ –∑–∞–¥–∞–Ω–∏—è")
    await MenuStates.waiting_for_profile.set()


# –û—Ç–≤–µ—Ç –Ω–∞ –æ—Ç–ø—Ä–∞–≤–∫—É —Å—Ç–∏–∫–µ—Ä–∞
@dp.message_handler(content_types=types.ContentType.STICKER, state=None)
async def handle_sticker(message: types.Message):
    chat_id = message.chat.id
    await bot.send_message(chat_id, "–ò–∑–≤–∏–Ω–∏—Ç–µ, —è –Ω–µ –ø—Ä–∏–Ω–∏–º–∞—é —Å—Ç–∏–∫–µ—Ä—ã.")

# –í–ù–ò–ú–ê–ù–ò–ï! –î–∞–Ω–Ω—ã–π handler –ª–æ–≤–∏—Ç –ª—é–¥–µ–π –±–µ–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è!
@dp.message_handler(state=None)
async def handle_The_Last_Frontier(message: types.Message, state: FSMContext):
    sost = await state.get_state()
    print(sost)
    await start_command(message,state)



if __name__ == '__main__':
    executor.start_polling(dispatcher=dp, skip_updates=True)

