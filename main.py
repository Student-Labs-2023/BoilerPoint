from dotenv import load_dotenv
from aiogram import Bot, types
from io import BytesIO
import qrcode
import random
import string
from aiogram.utils import executor , markdown
from aiogram.utils.markdown import hlink, escape_md
from aiogram.dispatcher import Dispatcher, FSMContext
from aiogram.contrib.fsm_storage.memory import MemoryStorage
import os
from typing import Optional
from aiogram.dispatcher.filters import Command
from aiogram.dispatcher.filters.state import State, StatesGroup
from buttons import *
from pydantic import ValidationError
from src.models.users import User
from src.repository.usersrepository import UserRepository
from src.repository.SupabaseUserRepository import SupabaseUserRepository
from GoogleSheets.Google_sheets import rating_update_start_thread
from supabase import Client, create_client
from Database.DataUsers import update_user_state_by_id, delete_user_data_by_id, get_user_info_by_id, \
    update_user_fullname_by_tgusr, update_user_age_by_tgusr, update_user_balance_by_tgusr
from codegen import *

load_dotenv()

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞, –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞ –∏ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞–∞ —Å–æ—Å—Ç–æ—è–Ω–∏–π
bot = Bot(token=os.getenv("TOKEN"))
dp = Dispatcher(bot, storage=MemoryStorage())
rating_update_start_thread()

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö Supabase
url: str = os.environ.get("SUPABASE_URL")
key: str = os.environ.get("SUPABASE_KEY")

supabase: Client = create_client(url, key)
table_name = "UsersData"

users: UserRepository = SupabaseUserRepository(supabase)


# –°–æ—Å—Ç–æ—è–Ω–∏—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
class RegistrationStates(StatesGroup):
    waiting_for_age = State()
    waiting_for_gender = State()
    waiting_for_name = State()
    final_reg = State()

# –°–æ—Å—Ç–æ—è–Ω–∏—è –º–µ–Ω—é
class MenuStates(StatesGroup):
    waiting_for_profile = State()
    profile = State()
    tasks = State()
    calendar = State()
    help = State()
    help_start = State()
    help_end = State()
    rating = State()
    promocode = State()
    promocodestart = State()

# –°–æ—Å—Ç–æ—è–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è
class ProlfileStates(StatesGroup):
    profile_menu_main_state = State()
    delete_profile = State()
    edit_profile = State()
    edit_profile_name = State()
    edit_profile_age = State()

# –°–æ—Å—Ç–æ—è–Ω–∏—è –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏
class AdminPanel(StatesGroup):
    admin_menu = State()
    change_user = State()
    change_user_end = State()
    get_info_about_user_start = State()
    get_info_about_user = State()
    get_info_about_user_end = State()
    change_user_start = State()
    change_user_fullname = State()
    change_user_fullnamestart = State()
    change_user_age = State()
    change_user_agestart = State()
    change_user_balance = State()
    change_user_balancestart = State()
    promo_menu = State()
    promo_check_promocode = State()
    promo_addpromostart = State()
    promo_addpromousages = State()
    promo_addpromocost = State()
    promo_addpromoend = State()
    promo_delpromo = State()
    promo_qr = State()
    promo_qrstart = State()
    promo_qrend = State()
    add_event = State()
    add_task = State()
    backward = State()
    rating_board = State()
    ticket = State()
    ticket_check = State()
    ticket_delete = State()
    ticket_start = State()
    ticket_middle = State()
    ticket_end = State()





# –•–µ–Ω–¥–ª–µ—Ä –æ—Ç–º–µ–Ω—ã –¥–µ–π—Å—Ç–≤–∏—è —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫—É
@dp.callback_query_handler(text="cancel", state=[AdminPanel.change_user_balance,AdminPanel.change_user_fullname,AdminPanel.change_user_agestart,AdminPanel.get_info_about_user])
async def cancel_action(call: types.CallbackQuery, state: FSMContext):
    await call.message.answer("–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ, –≤—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –º–µ–Ω—é –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏.", reply_markup=admrkbm)
    await AdminPanel.admin_menu.set()

@dp.message_handler(commands=['admin'], state='*')
async def admin_command(message: types.Message, state: FSMContext):
    # –ü—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ —Å–ø–∏—Å–∫–µ –∞–¥–º–∏–Ω–æ–≤
    admin_list = ['5617565289', '415378656', '551929814', '390483228']
    if str(message.from_user.id) not in admin_list:
        await message.reply("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞!")
        return

    # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∏ –≤—ã–≤–æ–¥ –∫–Ω–æ–ø–æ–∫ –∞–¥–º–∏–Ω–∫–∏
    await AdminPanel.admin_menu.set()
    user = users.get(message.chat.id)
    user.user_state = str(AdminPanel.admin_menu)
    users.set(user)
    await message.reply("–í—ã –≤–æ—à–ª–∏ –≤ –ø–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞", reply_markup=admrkbm)

# –•–µ–Ω–¥–ª–µ—Ä –¥–ª—è –∫–Ω–æ–ø–∫–∏  Ô∏è–ò–∑–º–µ–Ω–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
@dp.message_handler(text="‚öôÔ∏è–ò–∑–º–µ–Ω–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", state=AdminPanel.admin_menu)
async def admin_change_user(message: types.Message, state: FSMContext):
    await AdminPanel.change_user_start.set()
    user = users.get(message.chat.id)
    user.user_state = str(AdminPanel.change_user_start)
    users.set(user)
    await message.reply(
        "–í—ã –ø–æ–ø–∞–ª–∏ –≤ –º–µ–Ω—é —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –Ω–∞–∂–º–∏—Ç–µ –Ω—É–∂–Ω—É—é –≤–∞–º –∫–Ω–æ–ø–∫—É —á—Ç–æ–±—ã –∏–∑–º–µ–Ω–∏—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è. –ü–æ—Å–ª–µ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É –≤–≤–µ–¥–∏—Ç–µ @username —á–µ–ª–æ–≤–µ–∫–∞ –≤ —Ç–µ–ª–µ–≥—Ä–∞–º —á—Ç–æ–±—ã –ø–æ–º–µ–Ω—è—Ç—å –µ–≥–æ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã.",
        reply_markup=admue)

@dp.message_handler(text="–ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ", state=[AdminPanel.change_user_start, AdminPanel.change_user_end])
async def admin_get_user_info(message: types.Message, state: FSMContext):
    chat_id = message.chat.id
    user = users.get(chat_id) 
    user.user_state = str(AdminPanel.get_info_about_user)
    await message.reply("–í–≤–µ–¥–∏—Ç–µ @username –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ –∫–æ—Ç–æ—Ä–æ–º —Ö–æ—Ç–∏—Ç–µ –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é", reply_markup=types.ReplyKeyboardRemove())
    await message.reply("–î–ª—è –æ—Ç–º–µ–Ω—ã –¥–µ–π—Å—Ç–≤–∏—è, –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –æ—Ç–º–µ–Ω–∞", reply_markup=InlineKeyboardMarkup().add(cancel_button))
    await AdminPanel.get_info_about_user.set()
    users.set(user)

@dp.message_handler(state=AdminPanel.get_info_about_user)
async def admin_get_user_info_start(message: types.Message, state: FSMContext):
    chat_id = message.chat.id
    username = message.text
    user = users.get(chat_id)
    user.user_state = str(AdminPanel.get_info_about_user_start)
    try:
        userinfo = users.get(username)
        pseudo = userinfo.full_name
        gender = userinfo.gender
        age = userinfo.age
        balance = userinfo.balance
        if gender:
            gender = "üôã‚Äç‚ôÇÔ∏è"
            image = os.environ.get("MALE")
        else:
            gender = "üôã‚Äç‚ôÄÔ∏è"
            image = os.environ.get("FEMALE")
            # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        profile_message = f"–ü—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {username}:\n\n" \
        f"{gender}{pseudo}, {age} –ª–µ—Ç\n‚îî–ú–µ—Å—Ç–æ –≤ —Ç–æ–ø–µ: ?\n\n" \
        f"üí∞–ë–∞–ª–∞–Ω—Å: {balance}üîò –ø–æ–∏–Ω—Ç–æ–≤\n‚îî–ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π –ø–æ—Å–µ—â–µ–Ω–æ: ?"
        await bot.send_photo(chat_id=chat_id, photo=image, caption=profile_message, reply_markup=admue)
        await AdminPanel.get_info_about_user_end.set()
        user.user_state = str(AdminPanel.get_info_about_user_end)
        users.set(user)
        await state.finish()
        await AdminPanel.change_user_start.set()
    except IndexError:
        await message.reply("–¢–∞–∫–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç. ", reply_markup=admue)
        await AdminPanel.change_user_start.set()
        user.user_state = str(AdminPanel.change_user_start)
        users.set(user)
       
    
@dp.message_handler(text="–ò–∑–º–µ–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å", state=[AdminPanel.change_user_start, AdminPanel.change_user_end])
async def admin_change_user_balance(message: types.Message, state: FSMContext):
    await AdminPanel.change_user_balancestart.set()
    await message.reply("–í–≤–µ–¥–∏—Ç–µ @username –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫–æ—Ç–æ—Ä–æ–≥–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å", reply_markup=types.ReplyKeyboardRemove())
    user = users.get(message.chat.id)
    user.user_state = str(AdminPanel.change_user_balancestart)
    users.set(user)

@dp.message_handler(state=AdminPanel.change_user_balancestart)
async def admin_change_user_balance_handler(message: types.Message, state: FSMContext):
    username = message.text  # –ø–æ–ª—É—á–∞–µ–º username
    await state.update_data(username=username)
    await AdminPanel.change_user_balance.set()
    await message.reply("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", reply_markup=InlineKeyboardMarkup().add(cancel_button))
    user = users.get(message.chat.id)
    user.user_state = str(AdminPanel.change_user_balance)
    users.set(user)

@dp.message_handler(state=AdminPanel.change_user_balance)
async def admin_change_user_balance_handler(message: types.Message, state: FSMContext):
    new_balance = message.text
    data = await state.get_data()
    username = data.get("username")
    user = users.get(username)
    user.balance = new_balance
    #   –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—à–Ω–æ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏
    await state.finish()
    await AdminPanel.change_user_end.set()
    user.user_state = str(AdminPanel.change_user_end)
    users.set(user)
    await message.reply(f"–ë–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {username} —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω –Ω–∞ {new_balance}", reply_markup=admue)
# –•–µ–Ω–¥–ª–µ—Ä –¥–ª—è —Å–º–µ–Ω—ã —Ñ–∏–æ —á–µ—Ä–µ–∑ –∞–¥–º–∏–Ω–∞
@dp.message_handler(text="–ò–∑–º–µ–Ω–∏—Ç—å –§–ò–û", state=[AdminPanel.change_user_start, AdminPanel.change_user_end])
async def admin_change_user_fullname(message: types.Message, state: FSMContext):
    await AdminPanel.change_user_fullnamestart.set()
    await message.reply("–í–≤–µ–¥–∏—Ç–µ @username –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫–æ—Ç–æ—Ä–æ–≥–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å", reply_markup=types.ReplyKeyboardRemove())
    user = users.get(message.chat.id)
    user.user_state = str(AdminPanel.change_user_fullnamestart)
    users.set(user)

@dp.message_handler(state=AdminPanel.change_user_fullnamestart)
async def admin_change_user_fullname_handler(message: types.Message, state: FSMContext):
    username = message.text  # –ø–æ–ª—É—á–∞–µ–º username
    await state.update_data(username=username)  # —Å–æ—Ö—Ä–∞–Ω—è–µ–º username –≤ –¥–∞–Ω–Ω—ã—Ö —Å–æ—Å—Ç–æ—è–Ω–∏—è
    await AdminPanel.change_user_fullname.set()  # –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —Å–æ—Å—Ç–æ—è–Ω–∏—é
    await message.reply("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –§–ò–û –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", reply_markup=InlineKeyboardMarkup().add(cancel_button))
    user = users.get(message.chat.id)
    user.user_state = str(AdminPanel.change_user_fullname)
    users.set(user)

@dp.message_handler(state=AdminPanel.change_user_fullname)
async def admin_change_user_fullname_handler(message: types.Message, state: FSMContext):
    new_fullname = message.text  # –ø–æ–ª—É—á–∞–µ–º –Ω–æ–≤–æ–µ –§–ò–û
    if new_fullname.replace(" ", "").isalpha() and len(new_fullname) < 40:
        data = await state.get_data()
        username = data.get("username")  # –ø–æ–ª—É—á–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–π username –∏–∑ –¥–∞–Ω–Ω—ã—Ö —Å–æ—Å—Ç–æ—è–Ω–∏—è
        user = users.get(username)
        user.full_name = new_fullname
        user.user_state = str(AdminPanel.change_user_end)
        users.set(user)
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—à–Ω–æ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏
        await message.reply(f"–§–ò–û –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {username} —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ –Ω–∞ {new_fullname}", reply_markup=admue)
        await state.finish()
        await AdminPanel.change_user_end.set()
    else:
        await message.reply("–ù–µ–∫–∫–æ—Ä–µ–∫—Ç–Ω–æ–µ –§–ò–û")
        await AdminPanel.change_user_fullname.set()
        user = users.get(message.chat.id)
        user.user_state = str(AdminPanel.change_user_fullname)
        users.set(user)

# –•–µ–Ω–¥–ª–µ—Ä –¥–ª—è —Å–º–µ–Ω—ã –≤–æ–∑—Ä–∞—Å—Ç–∞ —á–µ—Ä–µ–∑ –∞–¥–º–∏–Ω –º–µ–Ω—é
@dp.message_handler(text="–ò–∑–º–µ–Ω–∏—Ç—å –≤–æ–∑—Ä–∞—Å—Ç", state=[AdminPanel.change_user_start, AdminPanel.change_user_end])
async def admin_change_user_age(message: types.Message, state: FSMContext):
    await AdminPanel.change_user_age.set()
    user = users.get(message.chat.id)
    user.user_state = str(AdminPanel.change_user_age)
    users.set(user)
    await message.reply("–í–≤–µ–¥–∏—Ç–µ @username –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫–æ—Ç–æ—Ä–æ–≥–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å", reply_markup=types.ReplyKeyboardRemove())

@dp.message_handler(state=AdminPanel.change_user_age)
async def admin_change_user_age_handler(message: types.Message, state: FSMContext):
    username = message.text  # –ø–æ–ª—É—á–∞–µ–º username
    await state.update_data(username=username)  # —Å–æ—Ö—Ä–∞–Ω—è–µ–º username –≤ –¥–∞–Ω–Ω—ã—Ö —Å–æ—Å—Ç–æ—è–Ω–∏—è
    await AdminPanel.change_user_agestart.set()  # –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —Å–æ—Å—Ç–æ—è–Ω–∏—é
    user = users.get(message.chat.id)
    user.user_state = str(AdminPanel.change_user_agestart)
    users.set(user)
    await message.reply("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –≤–æ–∑—Ä–∞—Å—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", reply_markup=InlineKeyboardMarkup().add(cancel_button))

@dp.message_handler(state=AdminPanel.change_user_agestart)
async def admin_change_user_age_handler(message: types.Message, state: FSMContext):
    new_age = message.text  # –ø–æ–ª—É—á–∞–µ–º –Ω–æ–≤—ã–π –≤–æ–∑—Ä–∞—Å—Ç
    try:
        new_age = int(new_age)
    except ValueError as e:
        await message.reply("–í–∞—à –≤–æ–∑—Ä–∞—Å—Ç –Ω–µ–∫–∫–æ—Ä–µ–∫—Ç–µ–Ω. –í–æ–∑—Ä–∞—Å—Ç –Ω–µ –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –±—É–∫–≤—ã!")
        print(f"Error validation age{e}")
    if new_age < 12 or new_age > 122:
        await message.reply("–í–∞—à –≤–æ–∑—Ä–∞—Å—Ç –Ω–µ–∫–∫–æ—Ä–µ–∫—Ç–µ–Ω. –í–æ–∑—Ä–∞—Å—Ç –¥–æ–ª–∂–µ–Ω –ª–µ–∂–∞—Ç—å –≤ –¥–∏–∞–ø–∞–∑–æ–Ω–µ –æ—Ç 12 - 122")
        await AdminPanel.change_user_agestart.set()
    else:
        data = await state.get_data()
        username = data.get("username")  # –ø–æ–ª—É—á–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–π username –∏–∑ –¥–∞–Ω–Ω—ã—Ö —Å–æ—Å—Ç–æ—è–Ω–∏—è
        user = users.get(username)
        user.age = new_age
        user.user_state = str(AdminPanel.change_user_end)
        users.set(user)
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—à–Ω–æ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏
        await message.reply(f"–í–æ–∑—Ä–∞—Å—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {username} —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω –Ω–∞ {new_age}", reply_markup=admue)
        await state.finish()
        await AdminPanel.change_user_end.set()

# –•–µ–Ω–¥–ª–µ—Ä –¥–ª—è –≤—Ö–æ–¥–∞ –≤ –º–µ–Ω—é –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤
@dp.message_handler(text="üóùÔ∏è–ü—Ä–æ–º–æ–∫–æ–¥—ã", state=AdminPanel.admin_menu)
async def admin_promocodes(message: types.Message, state: FSMContext):
    await AdminPanel.promo_menu.set()
    user = users.get(message.chat.id)
    user.user_state = str(AdminPanel.promo_menu)
    users.set(user)
    await message.reply("–í—ã –≤–æ—à–ª–∏ –≤ –º–µ–Ω—é –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤", reply_markup=admpromo)

@dp.message_handler(text="–î–æ–±–∞–≤–∏—Ç—å QR", state=AdminPanel.promo_menu)
async def admin_promocodes_addqr(message: types.Message, state: FSMContext):
    await AdminPanel.promo_qrstart.set()
    user = users.get(message.chat.id)
    user.user_state = str(AdminPanel.promo_qrstart)
    users.set(user)
    await message.reply("–í–≤–µ–¥–∏—Ç–µ –ø—Ä–æ–º–æ–∫–æ–¥, –∫–æ—Ç–æ—Ä—ã–π —Ö–æ—Ç–∏—Ç–µ –ø–æ–º—Å—Ç–∏—Ç—å –≤ QR-–∫–æ–¥", reply_markup=types.ReplyKeyboardRemove())

@dp.message_handler(state=AdminPanel.promo_qrstart)
async def admin_promocodes_add_qr_set(message: types.Message, state: FSMContext):
    promo_code = message.text
    promocode_data = supabase.table('Promocode').select('cost').eq('promo', promo_code).execute()

    if not promocode_data.data or promocode_data.data[0]['cost'] == 0:
        await message.reply("–¢–∞–∫–æ–≥–æ –ø—Ä–æ–º–æ–∫–æ–¥–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏–ª–∏ –ª–∏–º–∏—Ç –µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –∏—Å—á–µ—Ä–ø–∞–Ω", reply_markup=admpromo)
        await state.finish()
        await AdminPanel.promo_menu.set()
        return

    qr = qrcode.make(promo_code)

    byte_io = BytesIO()
    qr.save(byte_io, 'PNG')
    byte_io.seek(0)

    await message.reply_photo(byte_io, caption="–í–æ—Ç QR-–∫–æ–¥ –¥–ª—è –ø—Ä–æ–º–æ–∫–æ–¥–∞ " + promo_code , reply_markup=admpromo)

    byte_io.close()

    await state.finish()
    await AdminPanel.promo_menu.set()
    user = users.get(message.chat.id)
    user.user_state = str(AdminPanel.promo_menu)





@dp.message_handler(text="–î–µ–π—Å—Ç–≤—É—é—â–∏–µ –ø—Ä–æ–º–æ–∫–æ–¥—ã", state=AdminPanel.promo_menu)
async def admin_promocodes_check(message: types.Message, state: FSMContext):
    await AdminPanel.promo_check_promocode.set()
    chat_id = message.chat.id
    user = users.get(message.chat.id)
    user.user_state = str(AdminPanel.promo_check_promocode)

    promos = supabase.table('Promocode').select('promo', 'last', 'cost').filter('last', 'gt', 0).order('cost', desc=True).execute()

    promo_text = "üìù –î–µ–π—Å—Ç–≤—É—é—â–∏–µ –ø—Ä–æ–º–æ–∫–æ–¥—ã:\n\n"

    for promo in promos.data:
        code = promo['promo']
        uses_left = promo['last']
        cost = promo['cost']

        promo_text += escape_md(f"{code} - {uses_left} –∏—Å–ø., {cost} –ø–æ–∏–Ω—Ç–æ–≤\n")

    await bot.send_message(chat_id, promo_text, parse_mode="MarkdownV2", reply_markup=admpromo)
    await state.finish()
    await AdminPanel.promo_menu.set()
    user.user_state = str(AdminPanel.promo_menu)


@dp.message_handler(text ='–î–æ–±–∞–≤–∏—Ç—å –ø—Ä–æ–º–æ–∫–æ–¥',state=AdminPanel.promo_menu)
async def get_usages(message: types.Message, state: FSMContext):
    await message.reply("–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–π:", reply_markup=types.ReplyKeyboardRemove())
    await AdminPanel.promo_addpromousages.set()


@dp.message_handler(state=AdminPanel.promo_addpromousages)
async def get_cost(message: types.Message, state: FSMContext):
    usages = int(message.text)
    await message.reply("–í–≤–µ–¥–∏—Ç–µ —Ü–µ–Ω—É –ø—Ä–æ–º–æ–∫–æ–¥–∞:")
    await state.update_data(usages=usages)
    await AdminPanel.promo_addpromocost.set()


@dp.message_handler(state=AdminPanel.promo_addpromocost)
async def create_promo(message: types.Message, state: FSMContext):
    data = await state.get_data()
    usages = data.get("usages")
    cost = int(message.text)

    code = generate_promo(usages, cost)

    await message.reply(f"–ü—Ä–æ–º–æ–∫–æ–¥ {code} —Å {usages} –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è–º–∏ –∏ —Ü–µ–Ω–æ–π {cost} —Å–æ–∑–¥–∞–Ω", reply_markup=admpromo)
    await state.finish()
    await AdminPanel.promo_menu.set()
    user = users.get(message.chat.id)
    user.user_state = str(AdminPanel.promo_menu)

@dp.message_handler(text="–£–¥–∞–ª–∏—Ç—å –ø—Ä–æ–º–æ–∫–æ–¥", state=AdminPanel.promo_menu)
async def delete_promo(message: types.Message, state: FSMContext):
    await AdminPanel.promo_delpromo.set()
    await message.reply("–í–≤–µ–¥–∏—Ç–µ –ø—Ä–æ–º–æ–∫–æ–¥ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è", reply_markup=types.ReplyKeyboardRemove())
    user = users.get(message.chat.id)
    user.user_state = str(AdminPanel.promo_delpromo)
    users.set(user)


@dp.message_handler(state=AdminPanel.promo_delpromo)
async def delete_promo_handler(message: types.Message, state: FSMContext):
    code = message.text
    deleted = supabase.table('Promocode').delete().match({'promo': code}).execute()

    if not deleted.data:
        # –Ω–∏—á–µ–≥–æ –Ω–µ —É–¥–∞–ª–µ–Ω–æ
        await message.reply("–ü—Ä–æ–º–æ–∫–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω", reply_markup=admpromo)
        return

    # —É–¥–∞–ª–µ–Ω–∏–µ –ø—Ä–æ—à–ª–æ —É—Å–ø–µ—à–Ω–æ
    await message.reply(f"–ü—Ä–æ–º–æ–∫–æ–¥ {code} —É–¥–∞–ª–µ–Ω", reply_markup=admpromo)
    await AdminPanel.promo_menu.set()
    user = users.get(message.chat.id)
    user.user_state = str(AdminPanel.promo_menu)


# –•–µ–¥–ª–µ—Ä –¥–ª—è –±–µ–∫–∞ –≤ –º–µ–Ω—é –∞–¥–º–∏–Ω–∞
@dp.message_handler(text="‚¨ÖÔ∏è–ê–¥–º–∏–Ω –º–µ–Ω—é", state=[AdminPanel.change_user_start, AdminPanel.change_user_end, AdminPanel.promo_menu])
async def admin_backtomenu(message: types.Message, state: FSMContext):
    await message.reply("–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –∞–¥–º–∏–Ω –º–µ–Ω—é", reply_markup=admrkbm)
    await AdminPanel.admin_menu.set()
    user = users.get(message.chat.id)
    user.user_state = str(AdminPanel.admin_menu)
    users.set(user)

@dp.message_handler(text="‚¨ÖÔ∏è–ú–µ–Ω—é", state=AdminPanel.admin_menu)
async def admin_menu_back(message: types.Message, state: FSMContext):
    await MenuStates.waiting_for_profile.set()
    user = users.get(message.chat.id)
    user.user_state = str(MenuStates.waiting_for_profile)
    users.set(user)
    await message.reply("–í—ã –≤—ã—à–ª–∏ –∏–∑ –ø–∞–Ω–µ–ª–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞", reply_markup=rkbm)

@dp.message_handler(text="üìä–†–µ–π—Ç–∏–Ω–≥", state=AdminPanel.admin_menu)
async def admin_rating_board(message: types.Message, state: FSMContext):
    await AdminPanel.rating_board.set()
    user = users.get(message.chat.id)
    user.user_state = str(AdminPanel.rating_board)
    users.set(user)
    await show_rating(message.chat.id)
    await AdminPanel.admin_menu.set()
    user = users.get(message.chat.id)
    user.user_state = str(AdminPanel.admin_menu)
    users.set(user)

@dp.message_handler(Command('start'), state=None)
async def start_command(message: types.Message, state: FSMContext):
    chat_id = message.chat.id
    user = users.get(id=chat_id)  # –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ Supabase

    if user and not (user.full_name == ""):
        # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω
        await MenuStates.waiting_for_profile.set()
        await message.reply("–ß—Ç–æ–±—ã –ø—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–≤–æ–π –ø—Ä–æ—Ñ–∏–ª—å, –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É '–ü—Ä–æ—Ñ–∏–ª—å'.", reply_markup=rkbm)
    else:
        user = user if user else User(chat_id=chat_id)

        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        telegram_name = message.from_user.username

        user.user_state = str(RegistrationStates.waiting_for_age)
        if telegram_name == None:
            user.tgusr = "–£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç –∏–º–µ–Ω–∏"
        else:
            user.tgusr = "@" + telegram_name
        users.set(user)

        # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        await message.reply("–ü—Ä–∏–≤–µ—Ç! –î–∞–≤–∞–π –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º—Å—è! –í–≤–µ–¥–∏—Ç–µ –≤–∞—à –≤–æ–∑—Ä–∞—Å—Ç:")
        # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è "waiting_for_age" –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        await RegistrationStates.waiting_for_age.set()

@dp.message_handler(state=RegistrationStates.waiting_for_age)
async def handle_age(message: types.Message, state: FSMContext):
    chat_id = message.chat.id
    age = message.text
    try:
        age = int(age)
    except ValueError as e:
        await bot.send_message(chat_id, "–í–∞—à –≤–æ–∑—Ä–∞—Å—Ç –Ω–µ–∫–∫–æ—Ä–µ–∫—Ç–µ–Ω. –í–æ–∑—Ä–∞—Å—Ç –Ω–µ –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –±—É–∫–≤—ã!")
        print(f"Error validation age{e}")
    if age < 12 or age > 122:
        await bot.send_message(chat_id, "–í–∞—à –≤–æ–∑—Ä–∞—Å—Ç –Ω–µ–∫–∫–æ—Ä–µ–∫—Ç–µ–Ω. –í–æ–∑—Ä–∞—Å—Ç –¥–æ–ª–∂–µ–Ω –ª–µ–∂–∞—Ç—å –≤ –¥–∏–∞–ø–∞–∑–æ–Ω–µ –æ—Ç 12 - 122")
        await RegistrationStates.waiting_for_age.set()
    else:
        user = users.get(chat_id)
        user.age = age
        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤–æ–∑—Ä–∞—Å—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ DTO
        print(f"–í–æ–∑—Ä–∞—Å—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {chat_id}: {age}")

        # –ü–µ—Ä–µ—Ö–æ–¥ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —Å–æ—Å—Ç–æ—è–Ω–∏—é "waiting_for_gender"
        await RegistrationStates.waiting_for_gender.set()
        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user.user_state = str(RegistrationStates.waiting_for_gender)
        users.set(user)

        # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –ø–æ–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        await message.reply("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –ø–æ–ª (Male/Female):", reply_markup=ikbg)


@dp.message_handler(state=RegistrationStates.waiting_for_gender)
async def handle_gender(message: types.Message, state: FSMContext):
    gender = message.text.lower()
    if gender not in ["–º—É–∂—Å–∫–æ–π", "–∂–µ–Ω—Å–∫–∏–π"]:
        await message.reply("–ü–æ–ª —É–∫–∞–∑–∞–Ω –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ. –í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª –∫–Ω–æ–ø–∫–∞–º–∏ –Ω–∏–∂–µ:", reply_markup=ikbg)
        return

@dp.callback_query_handler(state=RegistrationStates.waiting_for_gender)
async def handle_gender_callback(query: types.CallbackQuery, state: FSMContext):
    chat_id = query.message.chat.id
    gender = query.data.lower()
    user = users.get(chat_id)
    user.gender = bool(int(gender))
    print(f"–ü–æ–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {chat_id}: {gender}")

    # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    await query.message.reply("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –§–ò–û:")

    # –ü–µ—Ä–µ—Ö–æ–¥ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —Å–æ—Å—Ç–æ—è–Ω–∏—é "waiting_for_name"
    await RegistrationStates.waiting_for_name.set()
    user.user_state = str(RegistrationStates.waiting_for_name)
    users.set(user)

@dp.message_handler(state=RegistrationStates.waiting_for_name)
async def handle_name(message: types.Message, state: FSMContext):
    chat_id = message.chat.id
    name = message.text
    if name.replace(" ", "").isalpha() and len(name) < 40:
        user = users.get(chat_id)
        user.full_name = name
        user.user_state = str(RegistrationStates.final_reg)  # –ø–æ —Å—É—Ç–∏ —Ñ–∏–Ω–∞–ª —Ä–µ–≥ –Ω–∞—Ñ–∏–≥ –Ω–µ –Ω—É–∂–µ–Ω
        users.set(user)

        print(f"–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {chat_id}: {name}")
        # –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –æ —É—Å–ø–µ—à–Ω–æ–π —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
        if str(message.from_user.username) == 'None':
            await bot.send_message(chat_id,
                                   f"–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —Å –Ω–µ—Ç–æ—á–Ω–æ—Å—Ç—è–º–∏, {user.full_name}!–£ –≤–∞—Å –Ω–µ—Ç –∏–º–µ–Ω–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¢–µ–ª–µ–≥—Ä–∞–º, —Å–≤—è–∑—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–∏ —Å –≤–∞–º–∏ –º–æ–∂–µ—Ç –±—ã—Ç—å —É—Å–ª–æ–∂–Ω–µ–Ω–∞, –≤–∞–º –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ —É–∫–∞–∑–∞—Ç—å –≤ –≤–∞—à–µ–º –ø—Ä–æ—Ñ–∏–ª–µ —Ç–µ–ª–µ–≥—Ä–∞–º–∞ –≤–∞—à–µ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –ø–µ—Ä–µ—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è –≤ –±–æ—Ç–µ.",
                                   reply_markup=rkbm)
        else:
            await bot.send_message(chat_id, f"–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞, {user.full_name}!", reply_markup=rkbm)
        await state.finish()
        await MenuStates.waiting_for_profile.set()
    else:
        await bot.send_message(chat_id, f"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ —Å–≤–æ–µ –§–ò–û")
        await RegistrationStates.waiting_for_name.set()

@dp.message_handler(state=MenuStates.waiting_for_profile)
async def handle_waiting_for_profile(message: types.Message, state: FSMContext):
    chat_id = message.chat.id
    select = message.text
    if select == "üë§–ü—Ä–æ—Ñ–∏–ª—å":
        await MenuStates.profile.set()
        await handle_profile(message, state)
    elif select == "üìä–†–µ–π—Ç–∏–Ω–≥":
        await MenuStates.rating.set()
        await user_rating_board(message, state)
    elif select == "üìÜ–ö–∞–ª–µ–Ω–¥–∞—Ä—å —Å–æ–±—ã—Ç–∏–π":
        await MenuStates.calendar.set()
        await handle_calendar(message, state)
    elif select == "‚ùì–ü–æ–º–æ—â—å":
        await MenuStates.help.set()
        await handle_help(message, state)
    elif select == "üìù–ó–∞–¥–∞–Ω–∏—è":
        await MenuStates.tasks.set()
        await handle_tasks(message, state)
    elif select == "üóùÔ∏è–í–≤–µ—Å—Ç–∏ –ø—Ä–æ–º–æ–∫–æ–¥":
        await MenuStates.promocode.set()
        await enter_promocode(message)
    else:
        await message.reply("–ù–µ—Ç —Ç–∞–∫–æ–≥–æ –≤–∞—Ä–∏–∞–Ω—Ç–∞ –≤—ã–±–æ—Ä–∞!", reply_markup=rkbm)



@dp.callback_query_handler(text="cancel_user", state=[ProlfileStates.edit_profile_name, ProlfileStates.edit_profile_age])
async def cancel_action(call: types.CallbackQuery, state: FSMContext):
    await call.message.answer("–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ, –≤—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –º–µ–Ω—é —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è.", reply_markup=menuedit)
    await ProlfileStates.edit_profile.set()

@dp.callback_query_handler(text="cancel_user_help", state=MenuStates.help_end)
async def cancel_action(call: types.CallbackQuery, state: FSMContext):
    await call.message.answer("–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ, –≤—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –º–µ–Ω—é –ø–æ–º–æ—â–∏.", reply_markup=userhelp)
    await MenuStates.help.set()

@dp.message_handler(state=ProlfileStates.edit_profile)
async def handle_waiting_for_edit_profile(message: types.Message, state: FSMContext):
    chat_id = message.chat.id
    select = message.text
    if select == "–ò–∑–º–µ–Ω–∏—Ç—å –§–ò–û":
        await ProlfileStates.edit_profile_name.set()
        await bot.send_message(chat_id, "–í—ã –≤—ã–±—Ä–∞–ª–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –§–ò–û", reply_markup=types.ReplyKeyboardRemove())
        await bot.send_message(chat_id, "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –§–ò–û ", reply_markup=cancel_button_for_user)
    elif select == "–ò–∑–º–µ–Ω–∏—Ç—å –≤–æ–∑—Ä–∞—Å—Ç":    
        await ProlfileStates.edit_profile_age.set()
        await bot.send_message(chat_id, "–í—ã –≤—ã–±—Ä–∞–ª–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤–æ–∑—Ä–∞—Å—Ç–∞", reply_markup=types.ReplyKeyboardRemove())
        await bot.send_message(chat_id, "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –≤–æ–∑—Ä–∞—Å—Ç ", reply_markup=cancel_button_for_user)
    elif select == "‚¨ÖÔ∏è–ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é":
        await MenuStates.waiting_for_profile.set()
        await bot.send_message(chat_id, "–í—ã –≤—ã—à–ª–∏ –≤ –º–µ–Ω—é! ", reply_markup=rkbm)
    else:
        await message.reply("–ù–µ—Ç —Ç–∞–∫–æ–≥–æ –≤–∞—Ä–∏–∞–Ω—Ç–∞ –≤—ã–±–æ—Ä–∞!")

@dp.message_handler(state=ProlfileStates.edit_profile_name)
async def edit_name_profile(message: types.Message, state:FSMContext):
    new_fullname = message.text  
    chat_id = message.chat.id
    if new_fullname.replace(" ", "").isalpha() and len(new_fullname) < 40:
        user = users.get(chat_id)
        user.full_name = new_fullname
        user.user_state = str(ProlfileStates.edit_profile_name)
        users.set(user)
        await message.reply(f"–ò–º—è —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ –Ω–∞ : {new_fullname}", reply_markup=rkbm)
        await state.finish()
        await MenuStates.waiting_for_profile.set()

@dp.message_handler(state=ProlfileStates.edit_profile_age)
async def edit_age_profile(message: types.Message, state: FSMContext):
    new_age = message.text  # –ø–æ–ª—É—á–∞–µ–º –Ω–æ–≤—ã–π –≤–æ–∑—Ä–∞—Å—Ç
    try:
        new_age = int(new_age)
    except ValueError as e:
        await message.reply("–í–∞—à –≤–æ–∑—Ä–∞—Å—Ç –Ω–µ–∫–∫–æ—Ä–µ–∫—Ç–µ–Ω. –í–æ–∑—Ä–∞—Å—Ç –Ω–µ –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –±—É–∫–≤—ã!")
        print(f"Error validation age{e}")
    if new_age < 12 or new_age > 122:
        await message.reply("–í–∞—à –≤–æ–∑—Ä–∞—Å—Ç –Ω–µ–∫–∫–æ—Ä–µ–∫—Ç–µ–Ω. –í–æ–∑—Ä–∞—Å—Ç –¥–æ–ª–∂–µ–Ω –ª–µ–∂–∞—Ç—å –≤ –¥–∏–∞–ø–∞–∑–æ–Ω–µ –æ—Ç 12 - 122")
        await ProlfileStates.edit_profile_age.set()
    else:
        chat_id = message.chat.id
        user = users.get(chat_id)
        user.age = new_age
        user.user_state = str(ProlfileStates.edit_profile_age)
        users.set(user)
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—à–Ω–æ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏
        await message.reply(f"–í–æ–∑—Ä–∞—Å—Ç —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω –Ω–∞ {new_age}", reply_markup=rkbm)
        await state.finish()
        await MenuStates.waiting_for_profile.set()

@dp.message_handler(text="üóùÔ∏è–í–≤–µ—Å—Ç–∏ –ø—Ä–æ–º–æ–∫–æ–¥", state=MenuStates.promocode)
async def enter_promocode(message: types.Message):
    await bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ , –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ , –≤–∞—à –ø—Ä–æ–º–æ–∫–æ–¥ —Å–æ–æ–±—â–µ–Ω–∏–µ–º")
    await MenuStates.promocodestart.set()


@dp.message_handler(state=MenuStates.promocodestart)
async def check_promocode(message: types.Message, state: FSMContext):
    chat_id = message.chat.id
    promocode = message.text
    poro = promocode

    user = users.get(chat_id)
    balance = user.balance

    promocode_data = supabase.table('Promocode').select('last', 'cost').eq('promo', promocode).execute()

    if not promocode_data.data:
        await message.reply("–ü—Ä–æ–º–æ–∫–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω!")
        await state.finish()
        await MenuStates.waiting_for_profile.set()
        user.user_state = str(MenuStates.waiting_for_profile)  # –ú–µ–Ω—é —Å—Ç–µ–π—Ç
        users.set(user)
        return

    promocode = promocode_data.data[0]

    used_promocode_data = supabase.table('UsedPromocode').select('chat_id').eq('promo', poro).eq('chat_id', chat_id).execute()

    if used_promocode_data.data:
        # —É–∂–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª
        await message.reply("–í—ã —É–∂–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª–∏ —ç—Ç–æ—Ç –ø—Ä–æ–º–æ–∫–æ–¥!")
        await state.finish()
        await MenuStates.waiting_for_profile.set()
        user.user_state = str(MenuStates.waiting_for_profile)  # –ú–µ–Ω—é —Å—Ç–µ–π—Ç
        users.set(user)
        return

    if promocode['last'] <= 0:
        await message.reply("–°—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è –ø—Ä–æ–º–æ–∫–æ–¥–∞ –∏—Å—Ç–µ–∫!")
        await state.finish()
        await MenuStates.waiting_for_profile.set()
        user.user_state = str(MenuStates.waiting_for_profile)  # –ú–µ–Ω—é —Å—Ç–µ–π—Ç
        users.set(user)
        return

    new_balance = balance + promocode['cost']

    new_last = promocode['last'] - 1

    updates = {
        'balance': new_balance,
    }

    supabase.table('UsersData').update(updates).eq('chat_id', chat_id).execute()

    # –î–æ–±–∞–≤–∏–º –∑–∞–ø–∏—Å—å –æ —Ç–æ–º, —á—Ç–æ –ø—Ä–æ–º–æ–∫–æ–¥ –±—ã–ª –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω –¥–∞–Ω–Ω—ã–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
    supabase.table('Promocode').update({'last': new_last}).eq('promo', poro).execute()
    expression = ''.join(random.choices(string.ascii_letters, k=8))
    supabase.table('UsedPromocode').insert({'id' : expression,'promo': poro, 'chat_id': str(chat_id)}).execute()

    await message.reply(f"–í–∞—à –±–∞–ª–∞–Ω—Å –ø–æ–ø–æ–ª–Ω–µ–Ω –Ω–∞ {promocode['cost']}!", reply_markup=rkbm)

    await state.finish()
    await MenuStates.waiting_for_profile.set()
    user.user_state = str(MenuStates.waiting_for_profile)  # –ú–µ–Ω—é —Å—Ç–µ–π—Ç
    users.set(user)



@dp.message_handler(text ="üìä–†–µ–π—Ç–∏–Ω–≥", state=MenuStates.waiting_for_profile)
async def user_rating_board(message: types.Message, state: FSMContext):
    await MenuStates.rating.set()
    user = users.get(message.chat.id)
    user.user_state = str(MenuStates.rating.set())
    users.set(user)
    await show_user_rating(message.chat.id)
    await MenuStates.waiting_for_profile.set()
    user = users.get(message.chat.id)
    user.user_state = str(MenuStates.waiting_for_profile)
    users.set(user)

@dp.message_handler(state=MenuStates.profile)
async def handle_profile(message: types.Message, state: FSMContext):
    chat_id = message.chat.id
    select = message.text
    if select == "üë§–ü—Ä–æ—Ñ–∏–ª—å":
        # –ó–∞–ø—Ä–æ—Å –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö Supabase
        user = users.get(chat_id)
        pseudo = user.full_name
        gender = user.gender
        age = user.age
        balance = user.balance
        if gender:
            gender = "üôã‚Äç‚ôÇÔ∏è"
            image = os.environ.get("MALE")
        else:
            gender = "üôã‚Äç‚ôÄÔ∏è"
            image = os.environ.get("FEMALE")
        # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        profile_message = f"–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –≤–∞—à –ø—Ä–æ—Ñ–∏–ª—å:\n\n" \
                          f"{gender}{pseudo}, {age} –ª–µ—Ç\n‚îî–í–∞—à–µ –º–µ—Å—Ç–æ –≤ —Ç–æ–ø–µ: ?\n\n" \
                          f"üí∞–ë–∞–ª–∞–Ω—Å: {balance}üîò –ø–æ–∏–Ω—Ç–æ–≤\n‚îî–ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π –ø–æ—Å–µ—â–µ–Ω–æ: ?"

        await bot.send_photo(chat_id=chat_id, photo=image, caption=profile_message, reply_markup=profilebuttons)
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É —É–¥–∞–ª–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å
    elif select == "‚ùå–£–¥–∞–ª–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å":
        await bot.send_message(chat_id, "–í—ã –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —Å–≤–æ–π –ø—Ä–æ—Ñ–∏–ª—å?", reply_markup=confirmbutton)
        await ProlfileStates.delete_profile.set()
    elif select == "‚öôÔ∏è–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ—Ñ–∏–ª—å":
        await ProlfileStates.edit_profile.set()
        await bot.send_message(chat_id, "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞–∫–∏–µ –¥–∞–Ω–Ω—ã–µ —Ö–æ—Ç–∏—Ç–µ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å! ", reply_markup=menuedit)
    elif select == "‚¨ÖÔ∏è–ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é":
        await MenuStates.waiting_for_profile.set()
        await bot.send_message(chat_id, "–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –º–µ–Ω—é!", reply_markup=rkbm)
    
    else:
        await bot.send_message(chat_id, "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤—ã–±–æ—Ä.")
    
@dp.message_handler(state=ProlfileStates.delete_profile)
async def del_profile(message: types.Message, state: FSMContext):
    select = message.text
    chat_id = message.chat.id
    tgname = message.from_user.username
    if tgname == None and select == "‚ùó–Ø –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Ö–æ—á—É —É–¥–∞–ª–∏—Ç—å —Å–≤–æ–π –ø—Ä–æ—Ñ–∏–ª—å –∏ –ø–æ–Ω–∏–º–∞—é, —á—Ç–æ –≤—Å–µ –º–æ–∏ –¥–∞–Ω–Ω—ã–µ –±—É–¥—É—Ç —É–¥–∞–ª–µ–Ω—ã –≤ —Ç–æ–º —á–∏—Å–ª–µ –∏ –±–∞–ª–∞–Ω—Å.":
        user = users.get(chat_id)
        users.delete(user)
        supabase.table('UsedPromocode').delete().eq('chat_id', chat_id).execute()
        #supabase.table('Pointer').delete().eq('chat_id', chat_id).execute()
        await bot.send_message(chat_id, "–í–∞—à –ø—Ä–æ—Ñ–∏–ª—å –±—ã–ª —É–¥–∞–ª–µ–Ω!", reply_markup=types.ReplyKeyboardRemove())
        await state.finish()
    elif tgname != None and select == "‚ùó–Ø –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Ö–æ—á—É —É–¥–∞–ª–∏—Ç—å —Å–≤–æ–π –ø—Ä–æ—Ñ–∏–ª—å –∏ –ø–æ–Ω–∏–º–∞—é, —á—Ç–æ –≤—Å–µ –º–æ–∏ –¥–∞–Ω–Ω—ã–µ –±—É–¥—É—Ç —É–¥–∞–ª–µ–Ω—ã –≤ —Ç–æ–º —á–∏—Å–ª–µ –∏ –±–∞–ª–∞–Ω—Å.":
        tgname = "@" + tgname
        user = users.get(tgname)
        users.delete(user)
        #supabase.table('Pointer').delete().eq('chat_id', chat_id).execute()
        supabase.table('UsedPromocode').delete().eq('chat_id', chat_id).execute()
        supabase.table('Report').delete().eq('tgusr',tgname).execute()
        await bot.send_message(chat_id, "–í–∞—à –ø—Ä–æ—Ñ–∏–ª—å –±—ã–ª —É–¥–∞–ª–µ–Ω!", reply_markup=types.ReplyKeyboardRemove())
        await state.finish()
    elif select == "‚¨ÖÔ∏è–ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é":
        await MenuStates.waiting_for_profile.set()
        await bot.send_message(chat_id, "–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –º–µ–Ω—é!", reply_markup=rkbm)
    else:
        await MenuStates.waiting_for_profile.set()
        await bot.send_message(chat_id, "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤—ã–±–æ—Ä, –≤—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –º–µ–Ω—é!", reply_markup=rkbm)
    
@dp.message_handler(state=MenuStates.calendar)
async def handle_calendar(message: types.Message, state: FSMContext):
    chat_id = message.chat.id
    select = message.text
    await bot.send_message(chat_id, f"–ù–∞–∂–∞—Ç–∞ –∫–Ω–æ–ø–∫–∞ –∫–∞–ª–µ–Ω–¥–∞—Ä—å")
    user = users.get(chat_id)
    user.user_state = str(MenuStates.calendar)
    users.set(user)
    await MenuStates.waiting_for_profile.set()

@dp.message_handler(state=MenuStates.help)
async def handle_help(message: types.Message, state: FSMContext):
    chat_id = message.chat.id
    select = message.text
    await bot.send_message(chat_id, f"–ü—Ä–∏–≤–µ—Ç! –ï—Å–ª–∏ —É —Ç–µ–±—è –µ—Å—Ç—å –∫–∞–∫–∏–µ-—Ç–æ –ø—Ä–æ–±–ª–µ–º—ã –∏–ª–∏ –ø–æ–∂–µ–ª–∞–Ω–∏—è , —Ç–æ —Å–º–µ–ª–µ–µ –Ω–∞–∂–∏–º–∞–π –Ω–∞ –∫–Ω–æ–ø–∫—É 'üì®–°–æ–∑–¥–∞—Ç—å –∑–∞—è–≤–∫—É' –∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä —Å —Ä–∞–¥–æ—Å—Ç—å—é —Ç–µ–±–µ –ø–æ–º–æ–∂–µ—Ç! ", reply_markup=userhelp)
    user = users.get(chat_id)
    user.user_state = str(MenuStates.help)
    users.set(user)
    await MenuStates.help_start.set()
    user.user_state = str(MenuStates.help_start)


@dp.message_handler(text="üì®–°–æ–∑–¥–∞—Ç—å –∑–∞—è–≤–∫—É", state=MenuStates.help_start)
async def handle_help_start(message: types.Message, state: FSMContext):
    chat_id = message.chat.id
    tgu = message.from_user.username
    tgus = '@' + tgu

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø—Ä–µ–¥—ã–¥—É—â–∏–µ –∑–∞—è–≤–∫–∏
    existing_reports = supabase.table('Report').select('tgusr').eq('tgusr', tgus).execute()
    if existing_reports.data:
        await message.reply("–£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å –æ—Ç–∫—Ä—ã—Ç–∞—è –∑–∞—è–≤–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –¥–æ–∂–¥–∏—Ç–µ—Å—å –æ—Ç–≤–µ—Ç–∞.", reply_markup=rkbm)
        await state.finish()
        await MenuStates.waiting_for_profile.set()

        user = users.get(chat_id)
        user.user_state = str(MenuStates.help)
        users.set(user)

        return

    await bot.send_message(chat_id, "–ù–∞–∂–∞—Ç–∞ –∫–Ω–æ–ø–∫–∞ —Å–æ–∑–¥–∞—Ç—å –∑–∞—è–≤–∫—É", reply_markup=types.ReplyKeyboardRemove())
    await bot.send_message(chat_id, "–†–∞—Å–ø–∏—à–∏—Ç–µ –∑–¥–µ—Å—å –Ω–∞–∏–ø–æ–¥—Ä–æ–±–Ω–µ–π—à–∏–º –æ–±—Ä–∞–∑–æ–º –∫–∞–∫–æ–π —É –≤–∞—Å –≤–æ–∑–Ω–∏–∫ –≤–æ–ø—Ä–æ—Å –∏–ª–∏ –ø–æ–∂–µ–ª–∞–Ω–∏–µ!",reply_markup=cancel_button_for_user_help)

    user = users.get(chat_id)
    user.user_state = str(MenuStates.help_end)
    await MenuStates.help_end.set()

@dp.message_handler(state=MenuStates.help_end)
async def handle_help_end(message: types.Message, state: FSMContext):
    try:
        Description = message.text
        chat_id = message.chat.id
        telegram_name = message.from_user.username
        tgusr = telegram_name
        if telegram_name == None:
            await bot.send_message(chat_id, "–£ –≤–∞—Å –Ω–µ—Ç –∏–º–µ–Ω–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Ç–µ–ª–µ–≥—Ä–∞–º!–£–∫–∞–∂–∏—Ç–µ –µ–≥–æ –≤ —Å–≤–æ—ë–º –ø—Ä–æ—Ñ–∏–ª–µ –∏ —Ç–æ–≥–¥–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏—è —Å–º–æ–∂–µ—Ç –≤–∞–º –ø–æ–º–æ—á—å.", reply_markup=userhelp)
            await MenuStates.help.set()

        else:
            tgusr = "@" + telegram_name

        # –í—Å—Ç–∞–≤–∫–∞ –≤ –ë–î
        supabase.table('Report').insert({'description': Description, 'tgusr': tgusr}).execute()

        # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞—é—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        await bot.send_message(chat_id, "–ó–∞—è–≤–∫–∞ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞! –í –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è —Å –≤–∞–º–∏ —Å–≤—è–∂–µ—Ç—Å—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä.", reply_markup=userhelp)

    except:
        chat_id = message.chat.id
        await bot.send_message(chat_id, "–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∑–∞—è–≤–∫–∏", reply_markup=userhelp)

    # –°–±—Ä–æ—Å —Å–æ—Å—Ç–æ—è–Ω–∏—è
    await state.finish()
    await MenuStates.help.set()
    users.user_state=str(MenuStates.help)

@dp.message_handler(text = "‚¨ÖÔ∏è–ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", state=[MenuStates.help,MenuStates.help_start])
async def handle_help_back(message: types.Message, state: FSMContext):
    chat_id = message.chat.id
    await MenuStates.waiting_for_profile.set()
    await bot.send_message(chat_id, "–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –º–µ–Ω—é!", reply_markup=rkbm)

@dp.message_handler(text = "–û–±—Ä–∞—â–µ–Ω–∏—è", state = AdminPanel.admin_menu)
async def handle_report(message: types.Message, state: FSMContext):
    chat_id = message.chat.id
    await bot.send_message(chat_id, "–ù–∞–∂–∞—Ç–∞ –∫–Ω–æ–ø–∫–∞ –æ–±—Ä–∞—â–µ–Ω–∏–π", reply_markup=admreport)
    await AdminPanel.ticket.set()
    user = users.get(chat_id)
    user.user_state = str(AdminPanel.ticket)


@dp.message_handler(text='–î–µ–π—Å—Ç–≤—É—é—â–∏–µ –æ–±—Ä–∞—â–µ–Ω–∏—è', state=AdminPanel.ticket)
async def check_tickets(message: types.Message, state: FSMContext):
    chat_id = message.chat.id
    user = users.get(chat_id)
    user.user_state = str(AdminPanel.ticket_check)

    # –ó–∞–ø—Ä–æ—Å –æ–±—Ä–∞—â–µ–Ω–∏–π –∏–∑ –ë–î
    tickets = supabase.table('Report').select('tgusr', 'description').execute().data

    tickets_text = "üì® –î–µ–π—Å—Ç–≤—É—é—â–∏–µ –æ–±—Ä–∞—â–µ–Ω–∏—è:\n\n"

    for i, ticket in enumerate(tickets, 1):
        username = ticket['tgusr']
        description = ticket['description']
        tickets_text += f"{i}. {username} - {description}\n"

    # –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
    await bot.send_message(chat_id, tickets_text)

    # –°–º–µ–Ω–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    await AdminPanel.ticket.set()
    user.user_state = str(AdminPanel.ticket)

@dp.message_handler(text = "–£–¥–∞–ª–∏—Ç—å –æ–±—Ä–∞—â–µ–Ω–∏–µ", state=AdminPanel.ticket)
async def delete_ticket(message: types.Message, state: FSMContext):
    chat_id = message.chat.id
    await AdminPanel.ticket_delete.set()
    user = users.get(chat_id)
    user.user_state = str(AdminPanel.ticket_delete)
    await message.reply("–í–≤–µ–¥–∏—Ç–µ @username –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —á—Ç–æ–±—ã —É–¥–∞–ª–∏—Ç—å –µ–≥–æ –∑–∞—è–≤–∫—É", reply_markup=types.ReplyKeyboardRemove())
    await AdminPanel.ticket_start.set()
    user.user_state = str(AdminPanel.ticket_delete)


@dp.message_handler(state=AdminPanel.ticket_start)
async def handle_ticket_delete(message: types.Message, state: FSMContext):
    chat_id = message.chat.id
    username = message.text

    # –ü—Ä–æ–≤–µ—Ä–∫–∞, –µ—Å—Ç—å –ª–∏ —Ç–∞–∫–æ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
    user_exists = supabase.table('Report').select('tgusr').eq('tgusr', username).execute()

    if not user_exists.data:
        await message.reply("–¢–∞–∫–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö", reply_markup= admreport)
        await state.finish()
        await AdminPanel.ticket.set()
        return

    # –£–¥–∞–ª–µ–Ω–∏–µ –æ–±—Ä–∞—â–µ–Ω–∏—è
    delete_query = supabase.table('Report').delete().eq('tgusr', username).execute()

    await message.reply(f"–û–±—Ä–∞—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {username} —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–æ", reply_markup=admreport)
    await AdminPanel.ticket.set()
    user = users.get(chat_id)
    user.user_state = str(AdminPanel.ticket)


@dp.message_handler(text="‚¨ÖÔ∏è–ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", state=AdminPanel.ticket)
async def handle_tickets_back(message: types.Message, state: FSMContext):
    await message.reply("–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –∞–¥–º–∏–Ω –º–µ–Ω—é", reply_markup=admrkbm)
    await AdminPanel.admin_menu.set()
    user = users.get(message.chat.id)
    user.user_state = str(AdminPanel.admin_menu)
    users.set(user)

@dp.message_handler(state=MenuStates.tasks)
async def handle_tasks(message: types.Message, state: FSMContext):
    chat_id = message.chat.id
    select = message.text
    await bot.send_message(chat_id, f"–ù–∞–∂–∞—Ç–∞ –∫–Ω–æ–ø–∫–∞ –∑–∞–¥–∞–Ω–∏—è")
    user = users.get(chat_id)
    user.user_state = str(MenuStates.tasks)
    users.set(user)
    await MenuStates.waiting_for_profile.set()

# –û—Ç–≤–µ—Ç –Ω–∞ –æ—Ç–ø—Ä–∞–≤–∫—É —Å—Ç–∏–∫–µ—Ä–∞
@dp.message_handler(content_types=types.ContentType.STICKER, state="*")
async def handle_sticker(message: types.Message):
    chat_id = message.chat.id
    await bot.send_message(chat_id, "–ò–∑–≤–∏–Ω–∏—Ç–µ, —è –Ω–µ –ø—Ä–∏–Ω–∏–º–∞—é —Å—Ç–∏–∫–µ—Ä—ã.")

# –í–ù–ò–ú–ê–ù–ò–ï! –î–∞–Ω–Ω—ã–π handler –ª–æ–≤–∏—Ç –ª—é–¥–µ–π –±–µ–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è!
@dp.message_handler(state= None)
async def handle_The_Last_Frontier(message: types.Message, state: FSMContext):
    sost = await state.get_state()
    print(sost)
    await start_command(message, state)

async def show_rating(chat_id: int):
    # –ó–∞–ø—Ä–æ—Å —Ç–æ–ø 4 –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ –ë–î
    top_users = supabase.table('UsersData').select('full_name', 'balance', 'tgusr').order('balance', desc = True).limit(4).execute()

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Ä–µ–π—Ç–∏–Ω–≥–∞
    rating_text = "üèÜ –†–µ–π—Ç–∏–Ω–≥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π üèÜ\n\n"
    for i, user in enumerate(top_users.data):
        position = i + 1
        full_name = user['full_name']
        balance = user['balance']
        tgusr = user['tgusr']
        rating_text += f"{position}. {full_name} ({tgusr}) - {balance} –±–∞–ª–ª–æ–≤\n"

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    await bot.send_message(chat_id, rating_text, reply_markup=ikbmrating)

async def show_user_rating(chat_id: int):
    # –ó–∞–ø—Ä–æ—Å —Ç–æ–ø 4 –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ –ë–î
    top_users = supabase.table('UsersData').select('full_name', 'balance', ).order('balance', desc = True).limit(4).execute()

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Ä–µ–π—Ç–∏–Ω–≥–∞
    rating_text = "üèÜ –†–µ–π—Ç–∏–Ω–≥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π üèÜ\n\n"
    for i, user in enumerate(top_users.data):
        position = i + 1
        full_name = user['full_name']
        balance = user['balance']
        rating_text += f"{position}. {full_name}  - {balance} –±–∞–ª–ª–æ–≤\n"

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    await bot.send_message(chat_id, rating_text, reply_markup=ikbmrating)

if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=True)